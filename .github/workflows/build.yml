name: build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14, ubuntu-24.04-arm, macos-13]
        build_type: ['Release']
        staticcompile: ['ON', 'OFF']

    steps:
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install boost & help2man for Linux
      if: matrix.os == 'ubuntu-20.04'
      run: sudo apt-get update && sudo apt-get install -yq libboost-dev libboost-serialization-dev libboost-program-options-dev help2man libgmp-dev libmpfr-dev

    - name: Install gmp for Mac
      if: contains(matrix.os, 'macos')
      run: |
        wget https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz
        tar xf gmp-6.3.0.tar.xz
        cd gmp-6.3.0
        ./configure --enable-static -enable-cxx --enable-shared
        make -j8
        sudo make install
        cd ..

    - name: Install mpfr for Mac
      if: contains(matrix.os, 'macos')
      run: |
        wget https://ftp.gnu.org/gnu/mpfr/mpfr-4.2.1.tar.xz
        tar xf mpfr-4.2.1.tar.xz
        cd mpfr-4.2.1
        ./configure --enable-static -enable-cxx --enable-shared
        make -j8
        sudo make install
        cd ..

    - name: Checkout Cadical
      uses: actions/checkout@v4
      with:
        repository: meelgroup/cadical
        ref: mate-only-libraries-1.8.0
        path: cadical

    - name: Build Cadical
      run: |
       cd cadical
       ./configure
       make -j8
       cd ..

    - name: Checkout Cadiback
      uses: actions/checkout@v4
      with:
        repository: meelgroup/cadiback
        ref: mate
        path: cadiback

    - name: Build Cadiback
      run: |
       cd cadiback
       ./configure
       make -j8
       cd ..

    - name: Checkout CMS
      uses: actions/checkout@v4
      with:
        repository: msoos/cryptominisat
        ref: 'master'
        path: cryptominisat

    - name: Build CMS
      run: |
       cd cryptominisat
       mkdir build && cd build
       cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_TESTING=OFF -DSTATICCOMPILE=${{ matrix.staticcompile }} ..
       cmake --build . --config ${{matrix.build_type}} -v
       cd ../..

    - name: Checkout SBVA
      uses: actions/checkout@v4
      with:
        repository: meelgroup/sbva
        ref: master
        path: sbva

    - name: Build SBVA
      run: |
       cd sbva
       mkdir build && cd build
       cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_TESTING=OFF -DSTATICCOMPILE=${{ matrix.staticcompile }} ..
       cmake --build . --config ${{matrix.build_type}} -v
       cd ../..

    - name: Checkout Arjun
      uses: actions/checkout@v4
      with:
        repository: meelgroup/arjun
        path: arjun

    - name: Build Arjun
      run: |
       cd arjun
       mkdir build && cd build
       cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_TESTING=OFF -DSTATICCOMPILE=${{ matrix.staticcompile }} ..
       cmake --build . --config ${{matrix.build_type}} -v
       cd ../..

    - name: Checkout AppMC
      uses: actions/checkout@v4
      with:
        repository: meelgroup/approxmc
        path: approxmc

    - name: Build AppMC
      run: |
       cd approxmc
       mkdir build && cd build
       cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_TESTING=OFF -DSTATICCOMPILE=${{ matrix.staticcompile }} ..
       cmake --build . --config ${{matrix.build_type}} -v
       cd ../..

    - uses: actions/checkout@v4
      with:
        path: project
        submodules: 'true'

    - name: Build project
      run: |
        cd project
        mkdir -p build && cd build
        cmake \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DSTATICCOMPILE=${{ matrix.staticcompile }} \
        -S ..
        cmake --build . --config ${{matrix.build_type}} -v

    - name: Upload Artifact - Linux AMD64
      if: contains(matrix.os, 'ubuntu') && matrix.staticcompile == 'ON' && !contains(matrix.os, 'arm')
      uses: actions/upload-artifact@v4
      with:
        name: unigen-linux-amd64
        path: unigen/unigen

    - name: Upload Artifact - Linux ARM
      if: contains(matrix.os, 'ubuntu') && matrix.staticcompile == 'ON' && contains(matrix.os, 'arm')
      uses: actions/upload-artifact@v4
      with:
        name: unigen-linux-arm64
        path: unigen/unigen

    - name: Upload Artifact - Mac x86_64
      if: matrix.os == 'macos-13' && matrix.staticcompile == 'ON'
      uses: actions/upload-artifact@v4
      with:
        name: unigen-mac-x86_64
        path: unigen/unigen

    - name: Upload Artifact - Mac ARM
      if: matrix.os == 'macos-14' && matrix.staticcompile == 'ON'
      uses: actions/upload-artifact@v4
      with:
        name: unigen-mac-arm64
        path: unigen/unigen

